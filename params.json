{
  "name": "Openfnuse",
  "tagline": "",
  "body": "# How to use OpenFn With ODK and SalesForce\r\n\r\n## Sample JSON Data Received by OpenFn\r\n```json\r\n{\r\n  \"token\": \"\",\r\n  \"formVersion\": \"\",\r\n  \"formId\": \"odk_form_id\",\r\n  \"data\": [\r\n    {\r\n      \"date\":\"2016-05-11\",\r\n      \"list_of_letters\":[\"abc\",\"def\",\"ghi\"]\r\n      }\r\n    ],\r\n  \"content\": \"record\"\r\n}\r\n```\r\n\r\n### Structure of JSON Data\r\n\r\nBelow is the extracted data from the ODK form.\r\n```json\r\n\"data\": [\r\n    {\r\n      \"date\":\"2016-05-11\",\r\n      \"list_of_letters\":[\"abc\",\"def\",\"ghi\"]\r\n      }\r\n    ]\r\n```\r\n>Fields with similar structure to `date` are types from ODK such as *text*, *date*, *integer*, *select_one*.\r\n\r\n>Fields with similar structure to `list_of_letters` is obtained from the *select_multiple* type in ODK.\r\n\r\nThe structure is similar to directories on a computer.\r\n\r\nLeft of the `:` represents the name of the file / folder. Right of the `:` represents the contents of the file / folder.\r\n\r\nSquare brackets `[ ]` on the right of `:` can be treated as contents of a folder.\r\n\r\nWhile quotations `\" \"` on the right of `:` are treated as contents of a file.\r\n\r\nExample using the above extracted data:\r\n```\r\n\\data\\ (folder)\r\n    date (file) -> \"2016-05-11\" (contents)\r\n    \\list_of_letters\\ (folder)\r\n        0 (file) -> \"abc\" (contents)\r\n        1 (file) -> \"def\" (contents)\r\n        2 (file) -> \"ghi\" (contents)\r\n```\r\n> NOTE: `\"list_of_letters\":[\"abc\",\"def\",\"ghi\"]` has 3 items within the *list_of_letters* folder. Further details of dealing with this type of lists on the next section.\r\n\r\n## OpenFn Language Structure\r\n```javascript\r\neach(\r\n    dataPath(\"data[*]\"),\r\n        create(\"Object__c\", fields(\r\n            field(\"RecordTypeID\",\"012345\"),\r\n            field(\"Date__c\", dataValue(\"date\"))\r\n            ...\r\n        ))\r\n)\r\n```\r\n\r\n### each(dataPath(*path*),*B*)\r\n`each` goes through each of the items in the list from the *path* specified. Therefore for each item the contents of *B* component will execute. \r\n\r\nIn the case of `dataPath(\"data[*]\")` using the above example there is only one item in the data list. But in the example below we have two items which are separated by a comma.\r\n\r\n```json\r\n\"data\": [\r\n    {\r\n      \"date\":\"2016-05-11\",\r\n      \"list_of_letters\":[\"abc\",\"def\",\"ghi\"]\r\n    },\r\n    {\r\n      \"date\":\"2016-06-12\",\r\n      \"list_of_letters\":[\"zxy\",\"wer\",\"fds\"]\r\n    }\r\n]\r\n```\r\n\r\nIn the case of `dataPath(\"list_of_letters[*]\")` using the above example there is three item in the list. \r\n\r\nNote When using `dataPath(\"list_of_letters[*]\")`, the `\"list_of_letters\":[\"abc\",\"def\",\"ghi\"]` can be seen as\r\n```json\r\n\"list_of_letters\":[\r\n     {\r\n      \"0\":\"a\",\r\n      \"1\":\"b\",\r\n      \"2\":\"c\"\r\n     },\r\n     {\r\n      \"0\":\"d\",\r\n      \"1\":\"e\",\r\n      \"2\":\"f\"\r\n     },\r\n     {\r\n      \"0\":\"g\",\r\n      \"1\":\"h\",\r\n      \"2\":\"i\"\r\n     }\r\n]\r\n```\r\n\r\n\r\n### dataPath(path)\r\nIn the above example `dataPath(\"data[*]\")` means the function is looking in the folder *\\data\\* which contains the *date* file and *list_of_letters* folder.\r\n\r\nSuppose we used `dataPath(\"data[*].list_of_letters[*]\")`, then we would be looking in the folder *\\list_of_letters\\* which contains the *0*, *1* and *2* files and not *date* file.\r\n\r\n### create(Object,fields(...))\r\nIn the above example the \"Object__c\" represents the Object in **Salesforce** where you want create the data to be stored.\r\n\r\nNOTE: If the `data[*]` is used as the `dataPath` and using the below data with 2 items, it would create 2 records within **Salesforce**.\r\n\r\n```json\r\n\"data\": [\r\n    {\r\n      \"date\":\"2016-05-11\",\r\n      \"list_of_letters\":[\"abc\",\"def\",\"ghi\"]\r\n    },\r\n    {\r\n      \"date\":\"2016-06-12\",\r\n      \"list_of_letters\":[\"zxy\",\"wer\",\"fds\"]\r\n    }\r\n]\r\n```\r\n\r\n### field(a,b)\r\nThe `a` component within `field` represents *API Name* within *Salesforce* where the data needs to be stored in. In **Salesforce** the *API Name* usually ends with *__c*.\r\nThe `b` component within `field` represents where the data is coming from. This can be hardcoded, from the ODK data or a mixture of both.\r\n##### Hardcoded Version\r\n`field(\"RecordTypeID\",\"012345\")` inserts \"012345\" into \"RecordTypeID\" in **Salesforce**.\r\n##### ODK Version\r\n`field(\"Date__c\", dataValue(\"date\"))` inserts the contents of \"date\" from ODK into \"Date__c\" in Salesforce.\r\n##### Custom Version\r\n```javascript\r\nfield(Object,function(state){return ...})\r\n```\r\nIn order to make customised data stored in **Salesforce** a `function` needs to be created. The above code shows the general structure where `return` is sends to data to be stored in the **Salesforce** Object.\r\n\r\nIn the next Section the focus is on making custom return fields and the conversion of **ODK** fields to **Salesforce** fields.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}